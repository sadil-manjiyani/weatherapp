{"version":3,"sources":["Temperature.js","App.js","reportWebVitals.js","index.js"],"names":["Temperature","useState","city","setCity","search","setSearch","useEffect","a","url","fetch","response","json","resJson","console","log","main","fetchAPI","type","onChange","event","target","value","placeholder","className","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAgGeA,G,MA7FK,WAAO,IAAD,EAEEC,mBAAS,MAFX,mBAEfC,EAFe,KAETC,EAFS,OAGMF,mBAAS,IAHf,mBAGfG,EAHe,KAGPC,EAHO,KAOtBC,qBACI,YACkB,uCAAG,gCAAAC,EAAA,6DAEPC,EAFO,2DAEmDJ,EAFnD,iEAIUK,MAAMD,GAJhB,cAIPE,EAJO,gBAiBSA,EAASC,OAjBlB,OAiBPC,EAjBO,OAmBbC,QAAQC,IAAIF,GACZT,EAAQS,EAAQG,MApBH,2CAAH,qDA4BdC,KACD,CAACZ,IAmBR,OACI,qCAEI,uBAAOa,KAAK,OAAOC,SATP,SAACC,GAEjBd,EAAUc,EAAMC,OAAOC,QAOuBC,YAAY,YAAYC,UAAU,cAIvErB,EAQO,sBAAKqB,UAAU,cAAf,UACI,oBAAIA,UAAU,WAAd,uBACA,6BAAKnB,IACL,oBAAImB,UAAU,WAAd,yBACA,+BAAKrB,EAAKsB,KAAM,WAChB,mBAAGD,UAAU,OAAb,uBAAiC,4BAAIrB,EAAKuB,WAC1C,mBAAGF,UAAU,OAAb,uBAAiC,4BAAIrB,EAAKwB,cAd7C,sBAAKH,UAAU,cAAf,UACL,oBAAIA,UAAU,WAAd,uBACA,qCACA,oBAAIA,UAAU,WAAd,yBACA,oCAAO,WACP,0CAAgB,mCAChB,0CAAgB,2CCxDrBI,MAVf,WACE,OACE,qBAAKJ,UAAU,WAAf,SACE,cAAC,EAAD,OCESK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.406a8c44.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Temperature.css';\r\n\r\nconst Temperature = () => {\r\n\r\n    const [city, setCity] = useState(null);\r\n    const [search, setSearch] = useState(\"\");\r\n    // const [temp, setTemp] = useState(null);\r\n    // const [res, setres] = useState(null)\r\n\r\n    useEffect(\r\n        () => {\r\n            const fetchAPI = async () => {\r\n\r\n                const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&appid=0f8a7bd4982d28e2c88b88c7cc4a9cf5&units=metric`;\r\n\r\n                const response = await fetch(url);\r\n                //     headers: {\r\n                //         'Content-Type': 'application/json',\r\n                //         'Accept': 'application/json'\r\n                //     }\r\n                // }\r\n                // )\r\n\r\n                // response.then((response) => {\r\n                //     console.log(response)\r\n                //     return response.json()\r\n                // }\r\n                // ).then((data) => { console.log(data) })\r\n                const resJson = await response.json();\r\n\r\n                console.log(resJson)\r\n                setCity(resJson.main)\r\n\r\n\r\n            };\r\n\r\n            // const resJson = await response.json();\r\n            // setCity(resJson.city);\r\n\r\n            fetchAPI();\r\n        }, [search]\r\n    )\r\n\r\n    // useEffect(\r\n    //     () => {\r\n    //         const url = `api.openweathermap.org/data/2.5 / weather ? q = ${ search }& appid=0f8a7bd4982d28e2c88b88c7cc4a9cf5`\r\n    //         const res = fetch((url));\r\n    //         res.then((response) => response.json)\r\n    //         console.log(res)\r\n    //         // console.log(res.then(res.json))\r\n    //     }\r\n    // )\r\n\r\n    const handleEvent = (event) => {\r\n        // setCity(event.target.value);\r\n        setSearch(event.target.value)\r\n\r\n        // console.log(resJson)\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <input type=\"text\" onChange={handleEvent} placeholder=\"City Name\" className=\"searchBox\" />\r\n\r\n            {\r\n\r\n                !city ? (<div className=\"mainDisplay\">\r\n                    <h2 className=\"cityName\">City Name</h2>\r\n                    <h3>-- </h3>\r\n                    <h2 className=\"cityName\">Temperature</h2>\r\n                    <h3>--{\"°C\"}</h3>\r\n                    <b>min Temp:</b><b>--</b>\r\n                    <b>max Temp:</b><b>--</b>\r\n                </div>) : (\r\n                        <div className=\"mainDisplay\">\r\n                            <h2 className=\"cityName\">City Name</h2>\r\n                            <h3>{search}</h3>\r\n                            <h2 className=\"cityName\">Temperature</h2>\r\n                            <h3>{city.temp}{\"°C\"}</h3>\r\n                            <b className=\"temp\">min Temp:</b><b>{city.temp_min}</b>\r\n                            <b className=\"temp\">max Temp:</b><b>{city.temp_max}</b>\r\n                        </div>\r\n                    )}\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Temperature;","// import logo from './logo.svg';\nimport './App.css';\n\nimport Temperature from './Temperature'\nimport Humidity from './Humidity'\nimport Wind from './Wind'\n// import { render } from 'react-dom';\nfunction App() {\n  return (\n    <div className=\"appWidth\">\n      <Temperature />\n      {/* <Humidity /> */}\n      {/* <Wind /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}